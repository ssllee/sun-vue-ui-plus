{
  "compilerOptions": {
    "declaration": true,
    // 指定ECMAScript目标版本
    "target": "ESNext",
    "useDefineForClassFields": true,
    "noImplicitAny": false, // 隐式具有“any”类型
    // 从 tslib 导入辅助工具函数（比如 __extends， __rest等）
    "importHelpers": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "strict": true,
    "jsx": "preserve",
    "types": [
      "vite/client"
    ],
    // 如果编译器无法根据变量的使用来判断类型时，将用 any 类型代替
    // "suppressImplicitAnyIndexErrors": true,
    // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "allowSyntheticDefaultImports": true,
    "sourceMap": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "lib": [
      "ESNext",
      "DOM"
    ],
    // 解析非相对模块名的基准目录
    "baseUrl": "./",
    // 模块名到基于 baseUrl的路径映射的列表。
    "paths": {
      "@": [
        "packages",
        "src"
      ],
      "@vue/shared": ["./node_modules/@vue/shared"],
      "@/*": [
        "packages/*",
        "src/*"
      ],
      "types/*": [
        "types/*"
      ]
    },
    // 忽略所有的声明文件（ *.d.ts）的类型检查。
    "skipLibCheck": true
  },
  "include": [
    "packages/**/*.ts",
    "packages/**/*.d.ts",
    "packages/**/*.tsx",
    "packages/**/*.vue",
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "types/**/*.d.ts"
  ],
  "exclude": [
    "node_modules",
    "lib",
    "public"
  ],
  "references": [
    {
      "path": "./tsconfig.node.json"
    }
  ]
}